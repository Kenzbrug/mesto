(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n){var r=e.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._renderer=r,this._container=n}var n,r;return n=t,(r=[{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}}])&&e(n.prototype,r),t}(),n={inputSelector:".popup__form-input",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(t){var n,r,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(){document.addEventListener("mousedown",(function(e){e.target.classList.contains("popup_open")&&o.closePopup()}))},(n="_modalCloseClick")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popup=document.querySelector(t),this.popupForm=this._popup.querySelector(".popup__form"),this._popupButtonClose=this._popup.querySelector(".popup__close-button"),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"openPopup",value:function(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose)}},{key:"closePopup",value:function(){document.removeEventListener("keydown",this._handleEscClose),this._popup.classList.remove("popup_open"),this.popupForm.reset()}},{key:"_handleEscClose",value:function(e){27===e.keyCode&&this.closePopup()}},{key:"setEventListener",value:function(){var e=this;this._modalCloseClick(),this._popupButtonClose.addEventListener("click",(function(t){e.closePopup()}))}}])&&r(t.prototype,n),e}();function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return(u="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=l(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(p,e);var t,n,r,o,i=(r=p,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=l(r);if(o){var n=l(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return s(this,e)});function p(e){var t,n=e.popupSelector,r=e.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p),(t=i.call(this,n))._handleFormSubmit=r,t._inputList=t._popup.querySelectorAll(".popup__form-input"),t._popupForm=t._popup.querySelector(".popup__form"),t._saveButton=t._popupForm.querySelector(".popup__save"),t}return t=p,(n=[{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._inputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"closePopup",value:function(){this._popupForm.reset(),u(l(p.prototype),"closePopup",this).call(this,this._popup)}},{key:"renderLoading",value:function(e){e?this._saveButton.textContent="Сохранение...":"Delete-yes"==this._saveButton.id?this._saveButton.textContent="Да":"cardCreate"==this._saveButton.id?this._saveButton.textContent="Создать":this._saveButton.textContent="Сохранить"}},{key:"setSubmitCallback",value:function(e){this._handleFormSubmit=e}},{key:"setEventListeners",value:function(){var e=this;this._popupForm.addEventListener("submit",(function(t){t.preventDefault(),e.renderLoading(!0),e._handleFormSubmit(e._getInputValues())}))}}])&&a(t.prototype,n),p}(o);function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var h=function(){function e(t){var n=t.nameSelector,r=t.infoSelector,o=t.infoAvatar;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._profileTitle=document.querySelector(n),this._profileDescription=document.querySelector(r),this._profileAvatar=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._profileTitle.textContent,link:this._profileDescription.textContent}}},{key:"setAvatar",value:function(e){this._profileAvatar.src=e.avatar}},{key:"setUserInfo",value:function(e){this._profileTitle.textContent=e.name,this._profileDescription.textContent=e.about,this._profileAvatar.src=e.avatar}}])&&f(t.prototype,n),e}();function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e,t,n){return(y="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=b(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e,t){return!t||"object"!==_(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var k=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=b(r);if(o){var n=b(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return v(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._popupSelector=e,t._popupOpenImg=document.querySelector(t._popupSelector),t._popupImg=t._popupOpenImg.querySelector(".popup__image"),t._popupTitle=t._popupOpenImg.querySelector(".popup__image-title"),t}return t=a,(n=[{key:"openPopup",value:function(e,t){this._popupImg.src=e,this._popupImg.alt=t,this._popupTitle.textContent=t,y(b(a.prototype),"openPopup",this).call(this)}}])&&d(t.prototype,n),a}(o);function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var S=function(){function e(t,n){var r,o,i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o=function(){"popupProfileEdit"!=i._buttonNewPlace.id&&(i._buttonNewPlace.classList.add("popup__save_disabled"),i._buttonNewPlace.disabled=!0)},(r="_buttonOff")in this?Object.defineProperty(this,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):this[r]=o,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formSelector=n}var t,n;return t=e,(n=[{key:"_setEventListeners",value:function(){var e=this;this._inputs=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputs.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleButtonState()}))}))}},{key:"_toggleButtonState",value:function(){this._hasValidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_showInputError",value:function(e){this._errorElement=this._formElement.querySelector("#".concat(e.id,"-error")),e.classList.add(this._inputErrorClass),this._errorElement.classList.add(this._errorClass),this._errorElement.style.display="block",this._errorElement.textContent=e.validationMessage}},{key:"_hideInputError",value:function(e){this._errorElement=this._formElement.querySelector("#".concat(e.id,"-error")),e.classList.remove(this._inputErrorClass),this._errorElement.classList.remove(this._errorClass),this._errorElement.style.display="none"}},{key:"_hasValidInput",value:function(){return this._inputs.some((function(e){return!e.validity.valid}))}},{key:"enableValidation",value:function(){var e=this;this._formElement=document.querySelector(this._formSelector),this._buttonNewPlace=this._formElement.querySelector(".popup__save-buttonOff"),this._formElement.addEventListener("submit",(function(t){t.preventDefault(),e._buttonOff()})),this._setEventListeners()}}])&&g(t.prototype,n),e}();function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function C(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var L=function(){function e(t,n,r,o){var i=this,a=o.handleCardClick,u=o.handleLikeClick,c=o.handleDeleteIconCard;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),C(this,"_invisibleDelteIcon",(function(){i._myId!==i._owner&&i._cardDeleteButton.classList.add("card__button-delete_invisible")})),C(this,"_openCardImg",(function(){i._cardImg.addEventListener("click",(function(){i._handleCardClick()}))})),C(this,"deleteCard",(function(){i._cardDeleteButton.closest(".card").remove()})),C(this,"_cardButtonLike",(function(){i._cardLikeButton.addEventListener("click",(function(){i._handleLikeClick(i)}))})),this._name=t.name,this._link=t.link,this._cardTemplate=n,this._handleCardClick=a,this._likes=t.likes,this._owner=t.owner._id,this._cardId=t._id,this._myId=r,this._handleLikeClick=u,this._handleDeleteIconCard=c}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return this._cardElement=this._cardTemplate.cloneNode(!0),this._cardElement}},{key:"renderLikes",value:function(){this._numberLike.textContent=this._likes.length,this.isLiked()?this._cardLikeButton.classList.add("card__button-like_active"):this._cardLikeButton.classList.remove("card__button-like_active")}},{key:"setLikesInfo",value:function(e){this._likes=e.likes,this.renderLikes()}},{key:"isLiked",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._myId}))}},{key:"_setEventListeners",value:function(){var e=this;this._cardDeleteButton.addEventListener("click",(function(){e._handleDeleteIconCard(e)}))}},{key:"getCard",value:function(){return this._element=this._getTemplate(),this._cardImg=this._element.querySelector(".card__img"),this._cardTitle=this._element.querySelector(".card__footer-title").textContent=this._name,this._cardDeleteButton=this._element.querySelector(".card__button-delete"),this._cardLikeButton=this._element.querySelector(".card__button-like"),this._numberLike=this._element.querySelector(".card__quantity-like"),this._cardImg.src=this._link,this._cardImg.alt=this._name,this._openCardImg(),this._cardButtonLike(),this.renderLikes(),this._invisibleDelteIcon(),this._setEventListeners(),this._element}}])&&E(t.prototype,n),e}();function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var P=function(e){return e.ok?e.json():Promise.reject(new Error("Ошибка: ".concat(e.status," - ").concat(e.statusText)))},I=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._headers=t.headers,this._url=t.url,this._cohort=t.cohort}var t,n;return t=e,(n=[{key:"getTasks",value:function(){return fetch("".concat(this._url).concat(this._cohort,"cards"),{headers:this._headers}).then(P)}},{key:"createTask",value:function(e){return fetch("".concat(this._url).concat(this._cohort,"cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(P)}},{key:"changeUserInfo",value:function(e){return fetch("".concat(this._url).concat(this._cohort,"users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.profile_name,about:e.profile_occupation})}).then(P)}},{key:"getProfileInfo",value:function(){return fetch("".concat(this._url).concat(this._cohort,"users/me"),{headers:this._headers}).then(P)}},{key:"setDeleteCard",value:function(e){return fetch("".concat(this._url).concat(this._cohort,"cards/").concat(e),{method:"DELETE",headers:this._headers}).then(P)}},{key:"setLikeCard",value:function(e){return fetch("".concat(this._url).concat(this._cohort,"cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(P)}},{key:"setDeleteLikeCard",value:function(e){return fetch("".concat(this._url).concat(this._cohort,"cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then(P)}},{key:"changeAvatar",value:function(e){return fetch("".concat(this._url).concat(this._cohort,"users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})}).then(P)}}])&&w(t.prototype,n),e}();function O(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}new S(n,"#popupFormProfile").enableValidation(),new S(n,"#popupFormCard").enableValidation(),new S(n,"#popupFormAvatar").enableValidation();var j,T=document.querySelector(".template-card").content.querySelector(".card"),q=document.querySelector(".cards__lists"),B=document.querySelector(".profile__button-change"),D=document.querySelector(".prifile__button-add"),A=document.querySelector(".profile__button-avatar-edit"),x=document.querySelector(".popup__form-input_type_name"),R=document.querySelector(".popup__form-input_type_occupation"),F=new I({url:"https://mesto.nomoreparties.co/v1/",cohort:"cohort-17/",headers:{authorization:"4b89edef-9be1-402e-a5c7-910a1504eece","Content-Type":"application/json"}});function V(e){return new L(e,T,j,{handleCardClick:function(){X.openPopup(e.link,e.name)},handleLikeClick:function(e){e.isLiked()?F.setDeleteLikeCard(e._cardId).then((function(t){e.setLikesInfo(t)})).catch((function(e){console.log(e)})):F.setLikeCard(e._cardId).then((function(t){e.setLikesInfo(t)})).catch((function(e){console.log(e)}))},handleDeleteIconCard:U})}var U=function(e){J.openPopup(),J.setSubmitCallback((function(){F.setDeleteCard(e._cardId).then((function(){e.deleteCard(),J.closePopup()})).catch((function(e){console.log(e)})).finally((function(){J.renderLoading(!1)}))}))},N=new h({nameSelector:".profile__name",infoSelector:".profile__occupation",infoAvatar:".profile__avatar-img"}),J=new p({popupSelector:".popup_type_delete-card"}),H=new t({renderer:function(e){var t=V(e).getCard();H.addItem(t)}},q),M=new p({popupSelector:".popup_type_add-card",handleFormSubmit:function(e){F.createTask(e).then((function(e){var t=V(e).getCard();H.addItem(t),M.closePopup()})).catch((function(e){console.log(e)})).finally((function(){M.renderLoading(!1)}))}}),z=new p({popupSelector:".popup_type_change-avatar",handleFormSubmit:function(e){F.changeAvatar(e).then((function(e){N.setAvatar(e),z.closePopup()})).catch((function(e){console.log(e)})).finally((function(){z.renderLoading(!1)}))}}),$=new p({popupSelector:".popup_type_edit-profile",handleFormSubmit:function(e){F.changeUserInfo(e).then((function(e){N.setUserInfo(e),$.closePopup()})).catch((function(e){console.log(e)})).finally((function(){$.renderLoading(!1)}))}}),G=new o(".popup_type_change-avatar"),K=new o(".popup_type_edit-profile"),Q=new o(".popup_type_add-card"),W=new o(".popup_type_delete-card"),X=new k(".popup_type_image");G.setEventListener(),K.setEventListener(),Q.setEventListener(),W.setEventListener(),X.setEventListener(),Promise.all([F.getProfileInfo(),F.getTasks()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(t,n)||function(e,t){if(e){if("string"==typeof e)return O(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?O(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];j=o._id,N.setUserInfo(o),H.renderItems(i)})).catch((function(e){return console.log(e)})),D.addEventListener("click",(function(){M.openPopup()})),A.addEventListener("click",(function(){z.openPopup()})),B.addEventListener("click",(function(){$.openPopup();var e=N.getUserInfo();x.value=e.name,R.value=e.link})),J.setEventListeners(),z.setEventListeners(),$.setEventListeners(),M.setEventListeners()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,